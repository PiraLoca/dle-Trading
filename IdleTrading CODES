// ==UserScript==
// @name         Cookie Clicker Agronomicon
// @namespace    https://github.com/Acharvak/
// @homepageURL  https://acharvak.github.io/Cookie-Clicker-Agronomicon/
// @updateURL    https://acharvak.github.io/Cookie-Clicker-Agronomicon/AgronomiconLoader.user.js
// @downloadURL  https://acharvak.github.io/Cookie-Clicker-Agronomicon/AgronomiconLoader.user.js
// @version      1.0
// @description  Load the Agronomicon when Cookie Clicker starts
// @author       Acharvak
// @match        https://orteil.dashnet.org/cookieclicker/
// @match        http://orteil.dashnet.org/cookieclicker/
// @grant        none
// ==/UserScript==

// This is apparently the best way to do it
if (IdleTrading === undefined) var IdleTrading = {};
if (typeof CCSE == 'undefined') Game.LoadMod ('https://klattmose.github.io/CookieClicker/' + (0? 'Beta /': '') + 'CCSE.js');
IdleTrading.name = 'Idle Trading';
IdleTrading.version = '1,10';
IdleTrading.GameVersion = '2.031';

IdleTrading.launch = function () {
	IdleTrading.defaultConfig = function () {
		// var M = Game.Objects ['Bank']. minigame;
		var conf = {
			bens: [],
			autoBuy: 1,
			AutoSell: 1
		};

		para (var iG = 2; iG <Game.ObjectsN; iG ++) {
			conf.goods.push ({
				ativo: verdadeiro,
				buyThresh: -1,
				sellThresh: -1,
				minPrice: 99999,
				maxPrice: -99999
			});
		}

		return conf;
	}

	IdleTrading.init = function () {
		IdleTrading.isLoaded = 1;

		IdleTrading.restoreDefaultConfig (1);
		if (CCSE.config.OtherMods.IdleTrading &&! Game.modSaveData [IdleTrading.name]) Game.modSaveData [IdleTrading.name] = JSON.stringify (CCSE.config.OtherMods.IdleTrading);
		/*IdleTrading.load ();
		CCSE.customLoad.push (IdleTrading.load);
		CCSE.customSave.push (IdleTrading.save); * /

		IdleTrading.ReplaceGameMenu ();
		CCSE.MinigameReplacer (IdleTrading.ReplaceNativeMarket, "Bank");


		// ***********************************
		// Ganchos Pós-Carregamento
		// Para suportar outros mods fazendo interface com este
		// ***********************************
		if (IdleTrading.postloadHooks) {
			para (var i = 0; i <IdleTrading.postloadHooks.length; ++ i) {
				IdleTrading.postloadHooks [i] ();
			}
		}

		if (Game.prefs.popups) Game.Popup (IdleTrading.name + 'carregado!');
		else Game.Notify (IdleTrading.name + 'carregado!', '', '', 1, 1);
	}


	// ***********************************
	// Menu Replacer
	// ***********************************

	IdleTrading.ReplaceGameMenu = function () {
		Game.customOptionsMenu.push (function () {
			CCSE.AppendCollapsibleOptionsMenu (IdleTrading.name, IdleTrading.getMenuString ());
		});

		Game.customStatsMenu.push (function () {
			CCSE.AppendStatsVersionNumber (IdleTrading.name, IdleTrading.version);
		});
	}

	IdleTrading.getMenuString = function () {
		if (Game.Objects ["Bank"]. minigameLoaded) {
			deixe m = CCSE.MenuHelper;
			var M = Game.Objects ['Banco']. minigame;

			var str = '<div class = "listagem">' + m.ActionButton ("IdleTrading.restoreDefaultConfig (2); Game.UpdateMenu ();", 'Restaurar padrão') +
						(typeof InsugarTrading == 'undefined'? '': m.ActionButton ("IdleTrading.importInsugarTrading (); Game.UpdateMenu ();", 'Importar de Insugar Trading')) +
						'</div>' +
						'<div class = "Listing">' + m.ToggleButton (IdleTrading.config, 'autoBuy', 'IdleTrading_autoBuyButton', 'AutoBuy ON', 'AutoBuy OFF', "IdleTrading.Toggle") +
												  m.ToggleButton (IdleTrading.config, 'autoSell', 'IdleTrading_autoSellButton', 'AutoSell ON', 'AutoSell OFF', "IdleTrading.Toggle") + '</div>';

			str + = m.Header ('Bens');

			para (var iG = 0; iG <M.goodsById.length; iG ++) {
				var me = M.goodsById [iG];
				var conf = IdleTrading.config.goods [iG];

				str + = '<div class = "Listing" style = "text-align: left;"> <div class = "icon" style = "pointer-events: none; display: inline-block; transform: scale (0,5) ; margem: -16px -18px -16px -14px; vertical-align: middle; background-position: '+ (-me.icon [0] * 48) +' px '+ (-me.icon [1] * 48 ) + 'px; "> </div> <span class =" bankSymbol "style =" width: 30px; overflow: hidden; white-space: nowrap; ">' + me.symbol + '</span>';
				str + = '<label> Compre em: </label>' + m.InputBox ('IdleTrading_buyThresh_' + iG, 65, conf.buyThresh, 'IdleTrading.UpdatePref (' + iG + ', this.value, 0)' );
				str + = '<label> Vender em: </label>' + m.InputBox ('IdleTrading_sellThresh_' + iG, 65, conf.sellThresh, 'IdleTrading.UpdatePref (' + iG + ', this.value, 1)' );
				str + = '<label> Histórico mínimo: <b> $' + Beautify (conf.minPrice, 2) + '</b>; Máx histórico: <b> $ '+ Beautify (conf.maxPrice, 2) +' </b> </label> ';
				str + = '</div>';
			}

			return str;
		}
		outro{
			return '<div class = "listing"> Minijogo do mercado de ações não carregado! </div>';
		}
	}


	// ***********************************
	// Configuração
	// ***********************************

	IdleTrading.save = function () {
		//CCSE.config.OtherMods.IdleTrading = IdleTrading.config;
		if (CCSE.config.OtherMods.IdleTrading) excluir CCSE.config.OtherMods.IdleTrading; // não há necessidade de manter isso, agora são dados inúteis
		retornar JSON.stringify (IdleTrading.config);
	}

	IdleTrading.load = function (str) {
		var config = JSON.parse (str);
// if (CCSE.config.OtherMods.IdleTrading) {
// var config = CCSE.config.OtherMods.IdleTrading;

			for (var pref in config) {
				if (pref == "mercadorias") {
					para (var iG = 0; iG <config.goods.length; iG ++) {
						if (IdleTrading.config.goods [iG]) {
							para (var pref2 em config.goods [iG]) {
								IdleTrading.config.goods [iG] [pref2] = config.goods [iG] [pref2];
							}
						}
					}
				}
				outro{
					IdleTrading.config [pref] = config [pref];
				}
			}
//}
	}

	IdleTrading.restoreDefaultConfig = function (mode) {
		IdleTrading.config = IdleTrading.defaultConfig ();
		if (mode == 2) IdleTrading.save (IdleTrading.config);
	}

	IdleTrading.Toggle = function (prefName, button, on, off, invert) {
		if (IdleTrading.config [prefName]) {
			l (botão) .innerHTML = off;
			IdleTrading.config [prefName] = 0;
		}
		outro{
			l (botão) .innerHTML = on;
			IdleTrading.config [prefName] = 1;
		}
		l (botão) .className = 'option' + ((IdleTrading.config [prefName] ^ invert)? '': 'off');
	}

	IdleTrading.ToggleGood = function (goodID, button, on, off, invert) {
		if (IdleTrading.config.goods [goodID]) {
			l (botão) .innerHTML = off;
			IdleTrading.config.goods [goodID] .active = 0;
		}outro{
			l (botão) .innerHTML = on;
			IdleTrading.config.goods [goodID] .active = 1;
		}

		l (botão) .className = 'option' + ((IdleTrading.config.goods [goodID] .active ^ invert)? '': 'off');
		IdleTrading.save (IdleTrading.config);
	}

	IdleTrading.UpdatePref = function (goodID, value, mode) {
		var val = parseFloat (valor);
		if (! isNaN (val)) {
			if (mode == 0) IdleTrading.config.goods [goodID] .buyThresh = val;
			if (mode == 1) IdleTrading.config.goods [goodID] .sellThresh = val;
		}
		Game.UpdateMenu ();
	}

	IdleTrading.importInsugarTrading = function () {
		var config = IdleTrading.config;
		var quant = InsugarTrading.settings.quantilesToDisplay;
		var bankLevel = Game.Objects ["Banco"]. level;
		var sellThresh = -1;
		var buyThresh = 2;

		para (var i = 0; i <quant.length; i ++) {
			if (quant [i] <buyThresh) buyThresh = quant [i];
			if (quant [i]> sellThresh) sellThresh = quant [i];
		}

		para (var iG = 0; iG <config.goods.length; iG ++) {
			config.goods [iG] ['buyThresh'] = Math.round (100 * InsugarTrading.quantile (bankLevel, iG, buyThresh)) / 100;
			config.goods [iG] ['sellThresh'] = Math.round (100 * InsugarTrading.quantile (bankLevel, iG, sellThresh)) / 100;
		}
	}


	// ***********************************
	// Funcionalidade
	// ***********************************

	IdleTrading.ReplaceNativeMarket = function () {
		if (! Game.customMinigame ['Banco']. tick) Game.customMinigame ['Banco']. tick = [];
		Game.customMinigame ['Bank']. Tick.push (IdleTrading.Logic);
	}

	IdleTrading.Logic = function () {
		var M = Game.Objects ['Banco']. minigame;
		para (var iG = 0; iG <M.goodsById.length; iG ++) {
			var good = M.goodsById [iG];
			var conf = IdleTrading.config.goods [iG];
			var price = Math.round (100 * M.getGoodPrice (bom)) / 100;

			if (IdleTrading.config.autoBuy && conf.buyThresh! = -1) {
				if (preço <= conf.buyThresh) M.buyGood (iG, 10000);
			}
			if (IdleTrading.config.autoSell && conf.sellThresh! = -1) {
				if (price> = conf.sellThresh) M.sellGood (iG, 10000);
			}

			if (preço <conf.minPrice) conf.minPrice = preço;
			if (preço> conf.maxPrice) conf.maxPrice = preço;
		}
	}


	if (CCSE.ConfirmGameVersion (IdleTrading.name, IdleTrading.version, IdleTrading.GameVersion)) Game.registerMod (IdleTrading.name, IdleTrading); // IdleTrading.init ();
}

if (! IdleTrading.isLoaded) {
	if (CCSE && CCSE.isLoaded) {
		IdleTrading.launch ();
	}
	outro{
		if (! CCSE) var CCSE = {};
		if (! CCSE.postLoadHooks) CCSE.postLoadHooks = [];
		CCSE.postLoadHooks.push (IdleTrading.launch);
	}
}
